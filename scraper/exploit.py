import re
import os
import time
import random
import traceback
from scraper.base_scrapper import BaseScrapper


# Credentials
USERNAME = "NightCat"
PASSWORD = "2PK&fx2i%yL%FsIMwJaE5gfr"

# Topic Counter
TOPIC_START_COUNT = 100
TOPIC_END_COUNT = 200


class ExploitScrapper(BaseScrapper):
    def __init__(self, kwargs):
        super(ExploitScrapper, self).__init__(kwargs)
        self.login_url = "https://forum.exploit.in/index.php?act=Login&CODE=01"
        self.topic_url = "https://forum.exploit.in/index.php?showtopic={}"
        self.username = kwargs.get('user')
        self.password = kwargs.get('password')
        self.ignore_xpath = '//div[@class="errorwrap"]'
        self.avatar_name_pattern = re.compile(r'.*/(\w+\.\w+)')

    def login(self):
        if not self.username:
            self.username = USERNAME
        if not self.password:
            self.password = PASSWORD
        payload = {
            'UserName': self.username,
            'PassWord': self.password,
            "CookieDate": "1"
        }
        login_response = self.session.post(self.login_url, data=payload)
        html_response = self.get_html_response(login_response.content)
        if html_response.xpath('//div[@class="errorwrap"]'):
            return False
        return True

    def write_paginated_data(self, html_response):
        next_page_block = html_response.xpath(
            '//span[@class="pagecurrent"]'
            '/following-sibling::span[1]/a/@href'
        )
        if not next_page_block:
            return
        next_page_url = next_page_block[0]
        pattern = re.compile(r'showtopic=(\d+)&st=(\d+)')
        match = pattern.findall(next_page_url)
        if not match:
            return
        topic, pagination_value = match[0]

        content = self.get_page_content(
            next_page_url, self.ignore_xpath
        )
        if not content:
            return

        paginated_file = '{}/{}-{}.html'.format(
            self.output_path, topic, pagination_value
        )
        with open(paginated_file, 'wb') as f:
            f.write(content)

        print('{}-{} done..!'.format(topic, pagination_value))
        return content

    def clear_cookies(self,):
        self.session.cookies['topicsread'] = ''

    def get_avatar_info(self, html_response):
        avatar_info = dict()
        # Need to change xpath since exploit is down now.
        urls = html_response.xpath(
            '//div[@class="uix_avatarHolderInner"]/a/img/@src'
        )
        for url in urls:
            if self.site_link not in url:
                url = self.site_link + url
            name_match = self.avatar_name_pattern.findall(url)
            if not name_match:
                continue
            name = name_match[0]
            if name not in avatar_info:
                avatar_info.update({
                    name: url
                })
        return avatar_info

    def process_topic(self, topic):
        try:
            response = self.process_first_page(
                topic, self.ignore_xpath
            )
            if response is None:
                return

            avatar_info = self.get_avatar_info(response)
            for name, url in avatar_info.items():
                self.save_avatar(name, url)

            # ------------clear cookies without logout--------------
            self.clear_cookies()
        except:
            traceback.print_exc()
            return
        self.process_pagination(response)

    def do_new_posts_scrape(self,):
        print('**************  New posts scan  **************')
        print('Implementation not complete yet!!')

    def do_rescan(self,):
        print('**************  Rescanning  **************')
        print('Broken Topics found')
        broken_topics = self.get_broken_file_topics()
        print(broken_topics)
        if not broken_topics:
            return
        if not self.login():
            print('Login failed! Exiting...')
            return
        print('Login Successful!')
        for topic in broken_topics:
            file_path = "{}/{}.html".format(self.output_path, topic)
            if os.path.exists(file_path):
                os.remove(file_path)
            self.process_topic(topic)

    def do_scrape(self):
        print('**************  Exploit Scrapper Started  **************\n')
        if not self.login():
            print('Login failed! Exiting...')
            return
        print('Login Successful!')
        # ----------------go to topic ------------------
        ts = self.topic_start_count or TOPIC_START_COUNT
        te = self.topic_end_count or TOPIC_END_COUNT + 1
        topic_list = list(range(ts, te))
        # random.shuffle(topic_list)
        for topic in topic_list:
            self.process_topic(topic)


def main():
    template = ExploitScrapper()
    template.do_scrape()


if __name__ == '__main__':
    main()
